#! /usr/bin/env python3

# Author: Olivier Diotte
# Date of birth: 2014/10/26
# Description: Rescales movies to be played on my (slow) Nexus S phone using ffmpeg

#import io
import subprocess
import tempfile
import re
import argparse
import os
import sys


WIDTH_MIN = 300

SETTINGS = {
		'libav': {
			'probe': 'avprobe',
			'conv': 'avconv',
			'videore': '^\s+Stream #0\.(\d+)(\([a-zA-Z]+\))?: Video:',
			'sizere': ' (\d+)x(\d+),? ',
			'othrstrmre': '^\s+Stream #0\.(\d+)[()a-zA-Z]*:',
			},
		'ffmpeg': {
			'probe': 'ffprobe',
			'conv': 'ffmpeg',
			'videore': '^\s+Stream #0.?(\d+)(\([a-zA-Z]+\))?: Video:',
			'sizere': '^\s+Stream #0.?:(\d+)[()a-zA-Z]*:',
			'othrstrmre': '^\s+Stream #0.?:(\d+)[()a-zA-Z]*:',
			}
		}



def is_mediafile(s):
	if (not os.access(s, os.R_OK)):
		raise argparse.ArgumentTypeError("Can't read file '{0}'".format(s))
	elif (not os.path.isfile(s)):
		raise argparse.ArgumentTypeError("Not a regular file: '{0}'".format(s))
	return s


def is_dir(s):
	if (not os.path.isdir(s)):
		raise argparse.ArgumentTypeError("Not a directory '{0}'".format(s))
	return s

def get_media_suite():
	for p in SETTINGS:
		ret = subprocess.call(['which', SETTINGS[p]['probe']], stdout=tempfile.TemporaryFile(), stderr=subprocess.STDOUT)
		if (ret == 0):
			ret = subprocess.call(['which', SETTINGS[p]['conv']], stdout=tempfile.TemporaryFile(), stderr=subprocess.STDOUT)
			if (ret != 0):
				raise EnvironmentError('{} installed, but not {}, fix your system'.format(SETTINGS[p]['probe'], SETTINGS[p]['conv']))
			break
	else:
		raise EnvironmentError("no probe program found. Install one of: " + ', '.join(SETTINGS))
	return SETTINGS[p]


SUITE = get_media_suite()

parser = argparse.ArgumentParser(description='Rescale movie files')
parser.add_argument('input_file', type=is_mediafile, nargs='+', help='the media files to rescale')
parser.add_argument('-d', type=is_dir, nargs='?', default=None, help='directory to put the rescaled files in. Defaults to input file directory')
args = parser.parse_args()

print(args.input_file)


f = tempfile.TemporaryFile()
for infile in args.input_file:
	print('Processing file "' + infile + '"')
	f.seek(0)
	f.truncate()
	ret = subprocess.call([SUITE['probe'], infile], stderr=f)
	f.seek(0)
	if (ret != 0):
		print('{} error:\n\tinfile="{0}"\n\terr="\n{1}"'.format(SUITE['probe'], infile, f.read().decode()))
		exit(1)

	s = ''
	snum_list = []
	vsize = None
	b_skip = True
	for line in f:
		line = line.decode('utf-8')
		if (b_skip):
			b_skip = not line.startswith('Input #0,')
			if (b_skip):
				continue
		s += line

		m = re.match(SUITE['videore'], line)
		if (None != m):
			snum_list.append(m.group(1))
			m = re.search(SUITE['sizere'], line)
			assert(m != None)
			assert(vsize == None)
			vsize = tuple(map(lambda x: int(x), m.group(1, 2)))
		else:
			m = re.match(SUITE['othrstrmre'], line)
			if (None != m):
				snum_list.append(m.group(1))
				#print("Other stream = " + line, end='')

	if (vsize is None):
		raise Exception('Couldn\'t find video stream size')
	s = s.rstrip('\n')

	for i in range(2, 10):
		new_vsize = tuple(map(lambda x: x / i, vsize))
		if (vsize[0] % i == 0
				and vsize[1] % i == 0
				#Make sure the width isn't too small
				and new_vsize[0] >= WIDTH_MIN
				):
			break
	else:
		sys.exit("Couldn't find suitable size. Original size: {0}".format(vsize))

	print("i={0}".format(i))

	print("new vsize = {0}".format(new_vsize))
	#print(s)
	print("snum_list = {0}".format(snum_list))

	p = infile.rpartition('.')
	assert(len(p[0]) > 0 and len(p[2]) < 4)
	outfile = p[0] + '_rescaled.' + p[2]

	#Tests
	#outfile = 'test.' + p[2]
	if (args.d != None):
		outfile = args.d + '/' + os.path.basename(outfile)

	assert(not os.path.exists(outfile))

	args = [SUITE['conv'], '-i', infile, '-acodec', 'copy', '-scodec', 'copy', '-vf', 'scale=iw/' + str(i) + ':-1']
	for s in snum_list:
		args.extend(['-map', '0:{}'.format(s)])
	args.append(outfile)

	print(args)
	subprocess.call(args)
	print('\n')
